%h2 What's New

.contents
  .bullet
    .description
      In this section, you'll find the major features introduced in the release. All the changes are documented in the Bundler 1.2 CHANGELOG.
      = link_to 'CHANGELOG', 'https://github.com/bundler/bundler/blob/1-2-stable/CHANGELOG.md'

%h2#ruby-directive Specifying a Ruby Version

.contents
  .bullet
    .description
      You can now specify the version of Ruby in the <code>Gemfile</code> like the following:
    :highlight_ruby
      ruby '1.9.3'

  .bullet
    .description
      That line declares that this application has a dependency on the Ruby VM that is ABI-compatible with 1.9.3. If the version check does not match, Bundler will raise an exception. This will ensure the running code matches. You can be more specific with the <code>:engine</code> and <code>:engine_version</code> options.
    :highlight_ruby
      ruby '1.9.3', :engine => 'jruby', :engine_version => '1.6.7'
    = link_to 'Learn More: Ruby Directive', './gemfile_ruby.html'

%h2#package-git-and-path-dependencies Package <code>:git</code> and <code>:path</code> Dependencies

.contents
  .bullet
    .description
      The <code>bundle package</code> command can also package <code>:git</code> and
      <code>:path</code> dependencies besides <code>.gem</code> files. This needs to be explicitly enabled
      via the <code>--all</code> option. Once used, the <code>--all</code> option will be remembered.
    = link_to 'Learn More: bundle pack', './bundle_package.html'

%h2#local-git-repos Local Git Repos

.contents
  .bullet
    .description
      Now when developing against a remote git repository, you can use a local
      git repo and keep the remote version for deployment. You can do this by
      setting a local git override:
    :highlight_plain
      bundle config local.GEM_NAME /path/to/local/git/repository

  .bullet
    .description
      For example, in order to use a local Rack repository, a developer could call:
    :highlight_plain
      bundle config local.rack ~/Work/git/rack
    .description
      and in your <code>Gemfile</code> you would set:
    :highlight_ruby
      gem 'rack', :github => 'rack/rack', :branch => 'master'
    .description
      You'll need to reference a git branch, since Bundler will do checks to
      ensure you don't work with invalid references. If the branch specified in
      the <code>Gemfile</code> and the current branch in the local git
      repository do not match, Bundler will abort. This ensures that a
      developer is always working against the correct branches, and prevents
      accidental locking to a different branch.
    = link_to 'Learn More: Git', './git.html#local'
