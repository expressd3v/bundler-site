%h2 Specifying a Ruby Version

.contents
  .bullet
    .description
      Like gems, developers can setup a dependency on Ruby. This makes your app fail faster in case you depend on specific features in a Ruby VM. This way, the Ruby VM on your deployment server will match your local one. You can do this by using the <code>ruby</code> directive in the <code>Gemfile</code>:
    :highlight_ruby
      ruby "RUBY_VERSION", :engine => "ENGINE", :engine_version => "ENGINE_VERSION"

  .bullet
    .description
      If you wanted to use JRuby 1.6.7 using Ruby 1.9.3, you would simply do the following:
    :highlight_ruby
      ruby "1.9.3", :engine => "jruby", :engine_version => "1.6.7"
  
  .bullet
    .description
      Bundler will make checks against the current running Ruby VM to make sure it matches what is specified in the <code>Gemfile</code>. If things don't match, Bundler will raise an Exception explaining what doesn't match.
    :highlight_plain
      Your Ruby version is 1.8.7, but your Gemfile specified 1.9.3

  .bullet
    .description
      Both <code>:engine</code> and <code>:engine_version</code> are optional. When these options are omitted, this means the app is compatible with a particular Ruby ABI but the engine is irrelevant. When <code>:engine</code> is used, <code>:engine_version</code> must also be specified.
  .bullet
    .description
      Using the <code>platform</code> command with the <code>--ruby</code> flag, you can see what <code>ruby</code> directive is specified in the <code>Gemfile</code>.
    :highlight_plain
      ruby 1.9.3 (jruby 1.6.7)
    =link("Learn More: bundle platform", "./bundle_platform.html")

  .bullet
    .description
      The <code>ruby</code> directive explicitly leaves out the ability to specify a patch level. Ruby patches often include important bug and security fixes and are extremely compatible.
