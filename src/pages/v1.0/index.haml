#intro
  Bundler manages an <strong>application's dependencies</strong> through its
  entire life across many machines systematically and repeatably.

%h2 I am interested in

.contents
  %ul.bullet
    = link("Report a Bug", "http://github.com/carlhuda/bundler/issues")
    = link("Understanding Bundler", "/omg.html")
    = link("Gemfile Manual", "/omg.html")
    = link("CLI Manual", "/omg.html")

%h2 Getting Started

.contents
  .bullet
    .description
      Getting started with bundler is easy
    :highlight_plain
      $ gem install bundler --pre

  .bullet
    .description
      If you're on an old version of Rubygems
      (before 1.3.6)
    :highlight_plain
      $ gem update --system

  .bullet
    .description
      Specify your dependencies in a Gemfile in your project's root
    :highlight_ruby
      source "http://rubygems.org"
      gem "nokogiri"
      gem "rack", "~>1.1"
      gem "rspec", :require => "spec"
    = link("Learn More: Gemfiles", "./gemfile.html")

  .bullet
    .description
      Install all of the required gems from your specified sources
    :highlight_plain
      $ bundle install
      $ git add Gemfile Gemfile.lock
    = link("Learn More: bundle install", "./bundle_install.html")
    .notes
      Make sure to add Gemfile.lock to your repository. This will
      ensure that other developers on your app, as well as your
      deployment environment, use exactly the same third-party code
      as you just installed.

  .bullet
    .description
      Inside your app, load up the bundled environment
    :highlight_ruby
      require "rubygems"
      require "bundler/setup"

      # require your gems as usual
      require "nokogiri"
    = link("Learn More: Bundler.setup", "./bundler_setup.html")

  .bullet
    .description
      Run an executable that comes with a gem in your bundle
    :highlight_plain
      $ bundle exec rspec spec/models
    .notes
      %p
        In some cases, running executables without <code>bundle exec</code>
        may work, if the executable happens to be installed in your system
        and does not pull in any gems that conflict with your bundle.

      %p
        However, this is unreliable and is the source of considerable pain.
        Even if it looks like it works, it may not work in the future or
        on another machine.

    .description
      If you want a way to get a shortcut to gems in your bundle
    :highlight_plain
      $ bundle install --binstubs
      $ bin/rspec spec/models
    .notes
      The executables installed into <code>bin</code> are scoped to the
      bundle and will always work
    = link("Learn More: Executables", "./executables.html")

%h2 Using Bundler with Frameworks

.contents
  .bullet
    .description
      Bundler works out of the box with Rails 3. Once you
      understand the basics of using bundler, you know
      everything you need to know.
      = link("Using Bundler with Rails 3", "./rails3.html")

  .bullet
    .description
      Bundler works with Rails 2.3 with a small change
      to boot.rb and adding a preinitializer.rb.
      = link("Using Bundler with Rails 2.3", "./rails23.html")

%h2 Checking Out an Application With a Gemfile for Development

.contents
  .bullet
    .description
      Install the required gems
    :highlight_plain
      $ bundle install
    = link("Learn More: bundle install", "./bundle_install.html")
    .notes
      If your system stores its gems in a root-owned location (this
      is the default for Mac OSX), bundler will ask you for your
      password, so it can install the gems there.

%h2 Updating Your Dependencies

.contents
  .bullet
    .description
      Make a change to your Gemfile
    :highlight_ruby
      # change
      gem "nokogiri", "1.4.2"
      # to
      gem "nokogiri", "1.4.3"
  .bullet
    .description
      Install the new gems
    :highlight_plain
      $ bundle install
    .notes
      %p
        After making a change to your <code>Gemfile</code>, the next
        <code>bundle install</code> will try to update the gems in
        your snapshot (<code>Gemfile.lock</code>) without forcing an
        update to any of the other gems in your Gemfile.

      %p
        This will usually work for simple dependencies, like 
        <code>nokogiri</code> or <code>sqlite3-ruby</code>. On the
        other hand, updating Rails will usually require an update
        to some other component, because of the amount of dependencies
        it has.

  .bullet
    .description
      If bundler reports a conflict, tell bundler to explicitly update
      the gem, but none of the other top-level dependencies (the ones
      in your <code>Gemfile</code>)
    :highlight_plain
      $ bundle update rails
    = link("Learn More: bundle update", "./bundle_update.html")

  .bullet
    .description
      In some rare cases, bundler will be unable to update the dependency
      without updating the top-level dependencies as well. In this case,
      tell bundler to update <strong>all</strong> dependencies
    :highlight_plain
      $ bundle update

%h2 Deploying Your Application

.contents
  .bullet
    .description
      Install the required gems for your application into your
      application's directory
    :highlight_plain
      $ bundle install --deployment
    .notes
      The <code>--deployment</code> flag turns on defaults that
      are appropriate for a deployment environment. For instance,
      gems are installed to <code>vendor/bundle</code> by default
      and your <code>Gemfile.lock</code> must be up to date.

  .bullet
    .description
      Use the built-in Capistrano recipe to quickly and easily
      deploy your application
    :highlight_ruby
      require "bundler/capistrano"
    .notes
      This recipe will symlink your <code>vendor/bundle</code> to
      <code>shared/vendor_bundle</code>, speeding up deployments
      by sharing downloaded gems across deployments, but not
      between applications.

%h2 Digging Further

.contents
  .bullet
    .description
      Store all of the required gems in your application. All future installs will get gems
      from this cache, bypassing rubygems.org
    :highlight_plain
      $ bundle package
    = link("Learn More: bundle package", "./bundle_package.html")

  .bullet
    .description
      Put dependencies in a group, so they can be ignored at install time or required
      together in your application
    :highlight_ruby
      group :development do
        gem "wirble"
      end
    = link("Learn more: Groups", "./groups.html")

  .bullet
    .description
      Use a gem that is stored in git and has a <code>.gemspec</code> at its root.
      Bundler will make the executables available to <code>bundle exec</code> and
      compile C extensions
    :highlight_ruby
      gem "nokogiri", :git =>
        "git://github.com/tenderlove/nokogiri.git"
    = link("Learn more: Git", "./git.html")

  .bullet
    .description
      Use a gem that you are actively developing on your file system
    :highlight_ruby
      gem "nokogiri", :path => "~/Code/nokogiri"

  .bullet
    .description
      Install gems to an alternate location. By default, bundler installs your
      gems to the system location
    :highlight_plain
      $ bundle install --path vendor
    .notes
      When installing to a path, bundler completely isolates your gems
      from the system, guaranteeing you a clear set of dependencies.
    = link("Learn More: bundle install", "./bundle_install.html")
